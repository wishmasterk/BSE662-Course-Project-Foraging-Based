% ===================== Batch BHV Processing Script =====================

% Define list of subjects and stress conditions
subjects = {'31730', '43000', '47131', '47204', '47324', '48238'};
conditions = {'pre', 'post'};

for s = 1:length(subjects)
    for c = 1:length(conditions)
        subid_str = subjects{s};
        cond_str = conditions{c};
        filename = [subid_str '_' cond_str 'stress.bhv'];
        
        fprintf('📂 Processing %s...\n', filename);
        
        try
            % ===================== Load BHV File =====================
            bhvStruct = bhv_read(filename);

            % ===================== Extract Core Data =====================
            reactionTimes = bhvStruct.ReactionTime(:);
            trialStartTimes = bhvStruct.AbsoluteTrialStartTime(:);
            numTrials = length(reactionTimes);

            % ===================== Find the first NaN (separator) =====================
            nanIdx = find(isnan(reactionTimes), 1, 'first');
            if isempty(nanIdx) || nanIdx == length(reactionTimes)
                error('Could not determine environment separation. Check data.');
            end

            % ===================== Reward Alignment =====================
            rewardsRaw = arrayfun(@(x) x.rwrd, bhvStruct.UserVars, 'UniformOutput', false);
            emptyIdx = cellfun(@isempty, rewardsRaw);
            rewardsRaw(emptyIdx) = {NaN};
            rewardsRaw = rewardsRaw(:);

            % Pad or truncate to match numTrials
            numExtracted = length(rewardsRaw);
            numMissing = numTrials - numExtracted;
            if numMissing > 0
                rewardsRaw = [rewardsRaw; repmat({NaN}, numMissing, 1)];
            elseif numMissing < 0
                rewardsRaw = rewardsRaw(1:numTrials);
            end

            reward_aligned = cell2mat(rewardsRaw);

            % ===================== Compute Trial Time and State =====================
            trial_time = [diff(trialStartTimes); NaN];
            state = isnan(reward_aligned);  % 1 = leave trial

            % ===================== Identify Leave Trials and Compute Avg Trial Times =====================
            beforeIdx = 1:nanIdx-1;
            afterIdx = nanIdx+1:numTrials;
            leaveBefore = beforeIdx(state(beforeIdx) == 1);
            leaveAfter = afterIdx(state(afterIdx) == 1);
            avg_time_before = mean(trial_time(leaveBefore), 'omitnan');
            avg_time_after = mean(trial_time(leaveAfter), 'omitnan');

            if avg_time_before > avg_time_after
                labelBefore = 'long';
                labelAfter = 'short';
            else
                labelBefore = 'short';
                labelAfter = 'long';
            end

            % ===================== Assign Environment Labels =====================
            env_labels = cell(numTrials, 1);
            for i = 1:numTrials
                if i == nanIdx
                    env_labels{i} = 'separator';
                elseif isnan(reactionTimes(i))
                    env_labels{i} = 'bad';
                elseif i < nanIdx
                    env_labels{i} = labelBefore;
                else
                    env_labels{i} = labelAfter;
                end
            end

            % ===================== Metadata =====================
            subid = repmat({subid_str}, numTrials, 1);
            stress_cond = repmat({cond_str}, numTrials, 1);

            % ===================== Final Table and Save =====================
            T = table(subid, stress_cond, env_labels, trialStartTimes, reactionTimes, ...
                trial_time, reward_aligned, state, ...
                'VariableNames', {'subid','stress_cond','env','trial_start_time','reaction_time','trial_time','reward','state'});

            outname = [subid_str '_' cond_str 'stress_processed.csv'];
            writetable(T, outname);
            fprintf('✅ Saved: %s\n', outname);

        catch ME
            fprintf('❌ Error processing %s: %s\n', filename, ME.message);
        end
    end
end

fprintf('\n🏁 All files processed.\n');

